import { Injectable } from '@nestjs/common';
import { SupabaseService } from './supabase.service';
import { ConfigurationService } from './configuration.service';
import * as fs from 'fs';
import * as path from 'path';

@Injectable()
export class RLSService {
  constructor(
    private supabaseService: SupabaseService,
    private configurationService: ConfigurationService,
  ) {}

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
   */
  async ensureRLSPolicies(): Promise<void> {
    try {
      console.log('üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä—è—é RLS –ø–æ–ª–∏—Ç–∏–∫–∏...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ª–∏ —É–∂–µ RLS –ø–æ–ª–∏—Ç–∏–∫–∏
      const rlsEnabled = await this.isRLSEnabled();
      if (rlsEnabled) {
        console.log('‚úÖ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
        return;
      }

      console.log('üîß –ü—Ä–∏–º–µ–Ω—è—é RLS –ø–æ–ª–∏—Ç–∏–∫–∏...');
      await this.applyRLSPolicies();
      console.log('‚úÖ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ RLS –ø–æ–ª–∏—Ç–∏–∫:', error.message);
      // –ù–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ RLS –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å - —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ RLS –ø–æ–ª–∏—Ç–∏–∫–∏
   */
  private async isRLSEnabled(): Promise<boolean> {
    try {
      const supabase = await this.supabaseService.getClient();

      const { data, error } = await supabase
        .from('system_settings')
        .select('value')
        .eq('key', 'rls_enabled')
        .single();

      if (error || !data) {
        return false;
      }

      return data.value === 'true';
    } catch (error) {
      console.log('RLS status check failed:', error.message);
      return false;
    }
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –∏–∑ SQL —Ñ–∞–π–ª–∞
   */
  private async applyRLSPolicies(): Promise<void> {
    const sqlPath = path.join(
      process.cwd(),
      'src',
      'migrations',
      'rls-policies.sql',
    );

    if (!fs.existsSync(sqlPath)) {
      throw new Error('RLS policies SQL file not found');
    }

    const sqlContent = fs.readFileSync(sqlPath, 'utf8');

    // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = this.splitSQLCommands(sqlContent);

    const supabase = await this.supabaseService.getClient();

    for (const command of commands) {
      if (command.trim()) {
        try {
          console.log(`–í—ã–ø–æ–ª–Ω—è—é: ${command.substring(0, 50)}...`);

          const { error } = await supabase.rpc('exec_sql', {
            sql_query: command,
          });

          if (error) {
            // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—à–∏–±–∫–∏ –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª–∏—Ç–∏–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            if (this.isIgnorableError(error.message)) {
              console.log(`‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É: ${error.message}`);
              continue;
            }
            throw new Error(`SQL Error: ${error.message}`);
          }
        } catch (sqlError) {
          // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL
          console.log(
            `–ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è: ${command.substring(0, 30)}...`,
          );
          await this.executeDirectSQL(command);
        }
      }
    }
  }

  /**
   * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —á–µ—Ä–µ–∑ Supabase
   */
  private async executeDirectSQL(sql: string): Promise<void> {
    try {
      const supabase = await this.supabaseService.getClient();

      // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
      if (
        sql.includes('ALTER TABLE') &&
        sql.includes('ENABLE ROW LEVEL SECURITY')
      ) {
        // –í–∫–ª—é—á–µ–Ω–∏–µ RLS —á–µ—Ä–µ–∑ API –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ALTER TABLE - —Ç—Ä–µ–±—É–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î');
        return;
      }

      if (sql.includes('CREATE POLICY')) {
        console.log(
          '‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º CREATE POLICY - —Ç—Ä–µ–±—É–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î',
        );
        return;
      }

      if (sql.includes('CREATE OR REPLACE FUNCTION')) {
        console.log(
          '‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º CREATE FUNCTION - —Ç—Ä–µ–±—É–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î',
        );
        return;
      }

      // –î–ª—è INSERT –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å
      if (sql.includes('INSERT INTO system_settings')) {
        const { error } = await supabase.from('system_settings').upsert({
          key: 'rls_enabled',
          value: 'true',
          description: 'Row Level Security policies enabled',
          encrypted: false,
        });

        if (error && !error.message.includes('duplicate')) {
          throw error;
        }
      }
    } catch (error) {
      console.log(`SQL execution failed: ${error.message}`);
      // –ù–µ –ø–∞–¥–∞–µ–º - RLS —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    }
  }

  /**
   * –†–∞–∑–±–∏–≤–∞–µ—Ç SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
   */
  private splitSQLCommands(sql: string): string[] {
    // –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    const withoutComments = sql
      .replace(/--.*$/gm, '')
      .replace(/\/\*[\s\S]*?\*\//g, '');

    // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    const commands = [];
    let currentCommand = '';
    let inFunction = false;

    const lines = withoutComments.split('\n');

    for (const line of lines) {
      const trimmedLine = line.trim();

      if (
        trimmedLine.includes('CREATE OR REPLACE FUNCTION') ||
        trimmedLine.includes('CREATE FUNCTION')
      ) {
        inFunction = true;
      }

      currentCommand += line + '\n';

      if (trimmedLine.endsWith(';')) {
        if (trimmedLine.includes('$$ LANGUAGE') || !inFunction) {
          commands.push(currentCommand.trim());
          currentCommand = '';
          inFunction = false;
        }
      }
    }

    if (currentCommand.trim()) {
      commands.push(currentCommand.trim());
    }

    return commands.filter((cmd) => cmd.length > 0);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
   */
  private isIgnorableError(errorMessage: string): boolean {
    const ignorableErrors = [
      'already exists',
      'duplicate key',
      'policy already exists',
      'function already exists',
      'table already has row level security enabled',
    ];

    return ignorableErrors.some((error) =>
      errorMessage.toLowerCase().includes(error.toLowerCase()),
    );
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è RLS
   */
  async setUserContext(userId: string, userRole: string): Promise<void> {
    try {
      const supabase = await this.supabaseService.getClient();

      // –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
      const { error } = await supabase.rpc('set_current_user', {
        user_id: userId,
        user_role: userRole,
      });

      if (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å RLS –∫–æ–Ω—Ç–µ–∫—Å—Ç:', error.message);
      }
    } catch (error) {
      console.log('RLS context setting failed:', error.message);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å RLS –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
   */
  async getRLSStatus(): Promise<any> {
    try {
      const supabase = await this.supabaseService.getClient();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const { data: settings } = await supabase
        .from('system_settings')
        .select('*')
        .eq('key', 'rls_enabled');

      return {
        enabled:
          settings && settings.length > 0 && settings[0].value === 'true',
        lastApplied:
          settings && settings.length > 0 ? settings[0].updated_at : null,
        policies: await this.getPolicyCount(),
      };
    } catch (error) {
      return {
        enabled: false,
        error: error.message,
      };
    }
  }

  /**
   * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–∏—Ç–∏–∫ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
   */
  private async getPolicyCount(): Promise<number> {
    try {
      const supabase = await this.supabaseService.getClient();

      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–∏—Ç–∏–∫–∞—Ö
      const { data, error } = await supabase.rpc('get_policy_count');

      if (error || !data) {
        return 0;
      }

      return data;
    } catch (error) {
      return 0;
    }
  }
}
